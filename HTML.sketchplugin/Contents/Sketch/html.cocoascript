
// - Mark: Utility functions

function runCommand(cmd, path){
	var task = [[NSTask alloc] init];    
	task.setLaunchPath("/bin/bash");
	task.setArguments(cmd);
	task.launch();
}

function alertError(msg, title) {
	runCommand(['-c', 'afplay /System/Library/Sounds/Basso.aiff']);
	alert(msg, title);
}

function alert(msg, title) {
	title = title || "Alert";
	var app = [NSApplication sharedApplication];
	[app displayDialog:msg withTitle:title];
}


// All logic to export selection to HTML / CSS
function Exporter(context) {
	var context = context;
	var doc = context.document;
	var page = doc.currentPage();	
	var selection = doc ? doc.findSelectedLayers() : nil;
	var selectedArtboards = getSelectedArtboards();
	
	var imageFormat = "svg";
	var imageScales = [1];
	var embedSvg = false;
	var exportFolder = null;
	
	// Accessors
	this.getSelection = function() {
		return selection;
	}
	
	this.getSelectedArtboards = function() {
		return selectedArtboards;
	}	
	
	// Utility functions

	function forEachLayer(group, func) {
		var layers = group.layers();
		for (var i=0; i < layers.count(); i++) {
			func(layers.objectAtIndex(i));
		}
	};
	
	function forEachChild(group, func) {
		var layers = group.children();
		for (var i=0; i < layers.count(); i++) {
			func(layers.objectAtIndex(i));
		}
	}
    
	function cleanString(str) {
		return str.replace(/\W+/g, "-");
	}
	
	function layerMarkedForExport(layer) {
		var exportOptions = layer.exportOptionsGeneric();
		var formats = exportOptions.exportFormats();
		return formats.count() > 0;
	}
	
	function saveTextToFile (filename, text) {
		var path = [@"" stringByAppendingString:filename];
		var str = [@"" stringByAppendingString:text];
		str.dataUsingEncoding_(NSUTF8StringEncoding).writeToFile_atomically_(path, true);
	}

	// Gets the artboards belonging to the selected items
	function getSelectedArtboards() {
		var artboards = [];
		selection.forEach(function(layer) {
			var artboard = layer.parentArtboard();
			if (artboard != undefined) {
				artboards.push(artboard);
			}
		});
		return artboards;
	}
	
	var exportLayers = {};
	
	function generateHTML(artboard) {
		// Create new array to save layers for export for each artboard
		exportLayers[artboard] = [];
		
		// Get HTML & CSS for children
		var childrenHtml = generateHTMLForChildren(artboard, "\t\t\t");
		
		// Generate HTML
		var html = generateHTMLHeader(artboard);		
		html += childrenHtml;
		html += generateHTMLFooter();
		
		return html;
	}
	
	function generateCSS(artboard) {
		// Generate CSS
		var css = "/* Generated by Sketch HTML Export */\n";
		css += "\n"
		
		css += "/* Boiler plate CSS */\n";
		css += "\n";
		css += generateBoilerPlateCSS();
		css += "\n";
		
		css += "/* Specific to " + artboard.name() + " */\n";
		css += generateCSSForArtboard(artboard);
		css += "\n";
		
		exportLayers[artboard].forEach(function(layer) {
			css += generateCSSForLayer(layer);
		});
		
		return css;
	}
	
	function generateHTMLHeader(artboard) {
		var html = "<html>\n";
		html += "\t<head>\n";
		html += "\t\t<link href='styles.css' rel='stylesheet'>\n";
		html += "\t</head>\n";
		
		html += "\t<body>\n";
		html += "\t\t<div class='sk-ab sk-" + cleanString(artboard.name()) + "'>\n";
		
		return html;
	}
	
	function generateHTMLFooter() {
		var html = "\t\t</div>\n";
		html += "\t</body>\n";
		html += "</html>";
		
		return html;
	}
	
	function generateHTMLForChildren(group, tabs) {
		var html = "";
		
		forEachLayer(group, function(layer) {
			if (!layer.isVisible()) {
				return;
			}
			
			var openTag = tabs + "<div class='sk-asset sk-" + cleanString(layer.name()) + "'>";
			var closeTag = "</div>\n";
			
			// If layer is exportable, write it to HTML but not its children
			if (layerMarkedForExport(layer)) {
				
				// This layer's image needs to be exported
				exportLayers[layer.parentArtboard()].push(layer);
				
				var embedCode = "";
				if (embedSvg) {
					embedCode = generateSVGString(layer);
				}
				
				html += openTag + embedCode + closeTag;
			}
			
			// If layer is group...
			else if (layer instanceof MSLayerGroup) {
				var childrenHtml = generateHTMLForChildren(layer, tabs + "\t");
				
				// If group is not empty, write it and its children to HTML
				if (childrenHtml != "") {
					html += openTag + "\n";
					html += childrenHtml;
					html += tabs + closeTag;
					
					// This layer needs to be exported to HTML
					exportLayers[layer.parentArtboard()].push(layer);
				}
			}
		});
		
		return html;
	}
	
	function exportImages(layers, exportPath) {
		layers.forEach(function(layer) {
			exportImageForLayer(layer, exportPath + "images/", imageFormat, imageScales);
		});
	}
	
	function exportImageForLayer(layer, exportPath, imageFormat, imageScales) {
		var filePaths = [];
		var formats = imageScales.map(function(scale) {
			return [MSExportFormat formatWithScale:scale name:"" fileFormat:imageFormat];		
		});
		var requests = [MSExportRequest exportRequestsFromExportableLayer:layer exportFormats:formats useIDForName: false];
		requests.forEach(function(request) {
			var filePath = exportPath + request.name() + "." + request.format();
			filePaths.push(filePath);
			[doc saveExportRequest:request toFile: filePath];
		});
		return filePaths;
	}
	
	function generateSVGString(layer) {
		log("exportFolder: " + exportFolder)
		
		var filePaths = exportImageForLayer(layer, exportFolder, "svg", [1]);
		var filePath = filePaths[0];
		
		log("filePath: " + filePath)
		
		var fileUrl = [NSURL fileURLWithPath:filePath];
		var str = [[NSString alloc] initWithContentsOfURL:fileUrl];
		log("str: " + str)
		deleteFile(filePath);
		
		return str;
	}
	
	function generateCSSForLayer(layer) {
		var css = ".sk-asset.sk-" + cleanString(layer.name()) + " {\n";
		css += "\twidth: " + Math.round(layer.frame().width()) + "px;\n";
		css += "\theight: " + Math.round(layer.frame().height()) + "px;\n";
		css += "\tleft: " + Math.round(layer.frame().x()) + "px;\n";
		css += "\ttop: " + Math.round(layer.frame().y()) + "px;\n";
		
		// Set background image for exported layer
		if (layerMarkedForExport(layer) && !embedSvg) {
			css += "\tbackground-image: url(\"images/" + layer.name() + "." + imageFormat + "\");\n";
		}
		
		css += "}\n";
		css += "\n";
		
		return css;
	}
	
	// Generate Header CSS
	function generateBoilerPlateCSS() {		
		var css = ".sk-ab {\n"
		+ "\tposition: relative;\n"
		+ "\toverflow: hidden;\n"
		+ "}\n";
		
		css += "\n";
		
		css += ".sk-asset {\n"
		+ "\tposition: absolute;\n"
		+ "\tbackground-repeat: no-repeat;\n"
		+ "}\n";
		
		return css;
	}
	
	// Generates CSS for just the artboard div
	function generateCSSForArtboard(artboard) {	
		var css = ".sk-ab.sk-" + cleanString(artboard.name()) + " {\n";
		
		if (artboard.hasBackgroundColor) {
			css += "\tbackground-color: " + artboard.backgroundColor().svgRepresentation() + ";\n";
		}
		
		css += "\twidth: " + Math.round(artboard.frame().width()) + "px;\n";
		css += "\theight: " + Math.round(artboard.frame().height()) + "px;\n";
		
		css += "}\n";
		
		return css;
	}
	
	this.saveFiles = function(folder) {
		exportFolder = folder;
		selectedArtboards.forEach(function(artboard) {
			var exportPath = exportFolder + artboard.name() + "/";
			createFolder(exportPath);
			createFolder(exportPath + "images/");
			
			var htmlPath = exportPath + "index.html";
			saveTextToFile(htmlPath, generateHTML(artboard));
			
			var cssPath = exportPath + "styles.css";
			saveTextToFile(cssPath, generateCSS(artboard));
			
			exportImages(exportLayers[artboard], exportPath);
		});
	}
}

function createFolder(name) {
	var fileManager = [NSFileManager defaultManager];
	[fileManager createDirectoryAtPath:name withIntermediateDirectories:true attributes:nil error:nil];
}

function deleteFile(name) {
	var fileManager = [NSFileManager defaultManager];
	[fileManager removeItemAtPath:name error:nil];
}

function fileSaver() {
    // Panel
    var openPanel = [NSOpenPanel openPanel]

    [openPanel setTitle: "Choose a location…"]
    [openPanel setMessage: "Select the export location…"];
    [openPanel setPrompt: "Export"];

    [openPanel setCanCreateDirectories: true]
    [openPanel setCanChooseFiles: false]
    [openPanel setCanChooseDirectories: true]
    [openPanel setAllowsMultipleSelection: false]
    [openPanel setShowsHiddenFiles: false]
    [openPanel setExtensionHidden: false]

    // [openPanel setDirectoryURL:url]

    var openPanelButtonPressed = [openPanel runModal]
    if (openPanelButtonPressed == NSFileHandlingPanelOKButton) {
        allowedUrl = [openPanel URL]
    }
    return allowedUrl
}

function options2() {
	// create a wrapper window
// 	var mainwindow = createWindow("Font Awesome - Add an icon with combobox", "Choose an icon")
// 	var wrapper = mainwindow[0]
// 	var content = mainwindow[1]

// 	var prototype = [[NSButtonCell alloc] init];
//     [prototype setTitle:@"Watermelons"];
//     [prototype setButtonType:NSRadioButton];
//     var matrixRect = NSMakeRect(20.0, 20.0, 125.0, 125.0);
//     var myMatrix = [[NSMatrix alloc] initWithFrame:matrixRect
//                                                     mode:NSRadioModeMatrix
//                                                prototype:prototype
//                                             numberOfRows:3
//                                          numberOfColumns:1];
//     [[[typeField window] contentView] addSubview:myMatrix];
//     var cellArray = [myMatrix cells];
//     [[cellArray objectAtIndex:0] setTitle:@"Apples"];
//     [[cellArray objectAtIndex:1] setTitle:@"Oranges"];
//     [[cellArray objectAtIndex:2] setTitle:@"Pears"];
    
//     [prototype release];
//     [myMatrix release];

// 	[content addSubview:prototype]
	
// 	var response = [NSApp runModalForWindow:wrapper];

	var panel = NSPanel.alloc().init();
// 	var content = window.contentView;
// 	content.addSubview(prototype);

// 	var alert = NSAlert.alloc().init();
// 	alert.setMessageText("Errors Detected");
// 	if (errors == "") {
// 		alert.addButtonWithTitle('Continue');
// 	}
// 	alert.addButtonWithTitle('Cancel');
// 	alert.setAccessoryView(textField);

// 	var responseCode = panel.runModal();

	var window = [[NSWindow alloc] init]
// 	[window setToolbar:nil]
	[window makeKeyWindow]
	[window becomeKeyWindow]
	[window setAnimationBehavior:NSWindowAnimationBehaviorNone]
	[window setFrame:NSMakeRect(500, 0, 640, 480) display: true]
	
	var content = [[NSView alloc] initWithFrame:NSMakeRect(500, 0, 640, 480)]
	content.setWantsLayer(true)
	[window setContentView:content];
	
	var cancelButton = [[NSButton alloc] initWithFrame:NSMakeRect(556, 5, 36, 36)]
	cancelButton.setTitle("Cancel");
	[cancelButton setCOSJSTargetFunction:function(sender) {
	  [wrapper orderOut:nil]
	  [NSApp stopModal]
	}];

	[content addSubview:cancelButton]
	
	var response = [NSApp runModalForWindow:window];

	// if is the response is ok, add icon to the layer
	if (response == NSOKButton) {
		log("OK")
	} else {
		log("Cancel")
	}
}

function options(exporter) {

	// Create alert window
	var alert = NSAlert.alloc().init();
	alert.setMessageText("Options");
	alert.addButtonWithTitle('Continue');
	alert.addButtonWithTitle('Cancel');
	
	// Create panel
	var view = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 125, 300));
	alert.setAccessoryView(view);
	
	// Create radio button array
	var formatButton = NSButtonCell.alloc().init();
    formatButton.setTitle("Image Format");
    formatButton.setButtonType(NSRadioButton);
    var formatMatrix = [[NSMatrix alloc] initWithFrame:NSMakeRect(20, 20, 125, 75)
                                                  mode:NSRadioModeMatrix
                                             prototype:formatButton
                                          numberOfRows:2
                                      numberOfColumns:1];
    var cellArray = formatMatrix.cells();
    cellArray.objectAtIndex(0).setTitle("png");
    cellArray.objectAtIndex(1).setTitle("svg");
	alert.setAccessoryView(formatMatrix);
// 	view.addSubView(formatMatrix);
	
	// Add SVG options
// 	var svgComboBox = NSComboBox.alloc().initWithFrame(NSMakeRect(50,160,100,50));
// 	svgComboBox.addItemsWithObjectValues(["Embed in HTML", "Export as images"]);
// 	view.addSubView(svgComboBox);
// 	
// 	// Add PNG options
// 	var pngButton = NSButtonCell.alloc().init();
// 	pngButton.setTitle("Support Retina Sizes");
// 	pngButton.setButtonType(NSSwitchButton);
//     var pngMatrix = [[NSMatrix alloc] initWithFrame:NSMakeRect(20, 200, 125, 75)
//                                                mode:nil
//                                           prototype:pngButton
//                                        numberOfRows:3
//                                     numberOfColumns:1];
// 	cellArray = pngMatrix.cells();
// 	cellArray.objectAtIndex(0).setTitle("@1x");
// 	cellArray.objectAtIndex(1).setTitle("@2x");
// 	cellArray.objectAtIndex(2).setTitle("@3x");
// 	view.addSubView(pngMatrix);
	
	// Display alert
	var responseCode = alert.runModal();

	// Errors or user hit cancel
	if (responseCode != NSAlertFirstButtonReturn) {
		log("Cancelled");
	}
		
	log(formatMatrix.selectedCells()[0].title());
}

// Called when user runs "Eport HTML"
function exportHTML(context) {
	try {
		var exporter = new Exporter(context);
		
		if (exporter.getSelectedArtboards() == undefined || exporter.getSelectedArtboards().length < 1) {
			alertError("Please select the artboards you want to export to HTML.", "No Artboard Selected");
			return;
		}
		
		options();
		
		// Open the system dialog to choose the export location
		var fileURL = fileSaver();
		var exportPath = fileURL.path() + "/";

		exporter.saveFiles(exportPath);
		
	} catch(e) {
		log(e);
		alert(e, "Error");
	}
}

function createWindow(title, subtitle) {
	// create a wrapper window
	var wrapper = [[NSWindow alloc] init]
	[wrapper setToolbar:nil]
	[wrapper makeKeyWindow]
	[wrapper becomeKeyWindow]
	[wrapper setAnimationBehavior:NSWindowAnimationBehaviorNone]
	// I had problems with NSBorderlessWindowMask and setIsVisible solution.
	// [wrapper setIsVisible:true]
	// [wrapper becomeFirstResponder:true]
	// [wrapper orderFront:nil];
	// [wrapper makeKeyAndOrderFront:self];
	// [wrapper setStyleMask:NSBorderlessWindowMask]
	[wrapper setFrame:[[NSScreen mainScreen] frame] display: true]
	[wrapper setHasShadow:false]
	[wrapper setOpaque:false]
	[wrapper setBackgroundColor:NSColor.clearColor()]

	var x = ([[NSScreen mainScreen] frame].size.width / 2) - 320;
	var y = ([[NSScreen mainScreen] frame].size.height / 2) - 200;

	// create a body
	var body = [[NSView alloc] initWithFrame:NSMakeRect(500, 0, 640, 480)]
	body.setWantsLayer(true)

	// create a header
	var header = [[NSView alloc] initWithFrame:NSMakeRect(x, y+352, 600, 48)]
	header.setWantsLayer(true)

	// header fixer
	var headerfixer = [[NSView alloc] initWithFrame:NSMakeRect(0, 352, 600, 20)]
	headerfixer.setWantsLayer(true)
	var fixbg = [CALayer layer]
	[fixbg setBackgroundColor:CGColorCreateGenericRGB(255/255, 189/255, 0/255, 1.0)]
	[headerfixer setLayer:fixbg]

	// create a content area
	var content = [[NSView alloc] initWithFrame:NSMakeRect(x, y, 600, 400)]
	content.setWantsLayer(true)

	[content addSubview:headerfixer]

	// create a layer to content
	var contentLayer = [CALayer layer]
	[contentLayer setBackgroundColor:CGColorCreateGenericRGB(255/255, 255/255, 255/255, 1.0)] //RGB plus Alpha Channel
	[contentLayer setMasksToBounds: true]
	[contentLayer setCornerRadius: 6.0]
	[content setLayer:contentLayer]

	// content area shadow
	dropShadow = [[[NSShadow alloc] init] autorelease];
	[dropShadow setShadowColor:[NSColor colorWithCalibratedWhite:0.0 alpha:0.4]];
	[dropShadow setShadowBlurRadius:8];
	[dropShadow setShadowOffset:NSMakeSize(0,0)];
	[content setShadow: dropShadow];

	// content append to body
	[body addSubview:content]

	// set body as content view of wrapper
	[wrapper setContentView:body];

	// title add to header
	var titleField = Library.components.title(title,14,[NSColor blackColor],NSMakeRect(16, 5, 400, 30));
	[titleField setAlphaValue:0.6]
	[header addSubview:titleField]

	// set background to header
	var headerBG = [CALayer layer]
	[headerBG setBackgroundColor:CGColorCreateGenericRGB(255/255, 189/255, 0/255, 1.0)] //RGB plus Alpha Channel
	[headerBG setMasksToBounds:true]
	[headerBG setCornerRadius:6.0]
	[header setClipsToBounds:true]
	[header setLayer:headerBG]

	// subtitle in window
	var subTitleField = Library.components.title(subtitle,22,[NSColor blackColor],NSMakeRect(x+25, y+300, 300, 30));
	[[wrapper contentView] addSubview:subTitleField]

	// create a cancel button
	var cancelbuttonimage = [NSImage imageNamed:NSImageNameStopProgressTemplate];
	// call custom function to build cancel button
	var cancelButton = Library.components.custombutton(cancelbuttonimage,NSMakeRect(556, 5, 36, 36));
	[cancelButton setCOSJSTargetFunction:function(sender) {
	  [wrapper orderOut:nil]
	  [NSApp stopModal]
	}];

	[header addSubview:cancelButton]

	// create a help button
	var helpbuttonimage = [NSImage imageNamed:NSImageNameBookmarksTemplate];
	// call custom function to build help button
	var helpButton = Library.components.custombutton(helpbuttonimage,NSMakeRect(520, 5, 36, 36));
	[helpButton setCOSJSTargetFunction:function(sender) {
	  var url = [NSURL URLWithString:@"https://github.com/keremciu/sketch-use-fontawesome/blob/master/HELP.md"]
	  if( ![[NSWorkspace sharedWorkspace] openURL:url] ){
		  sketchLog(@"Failed to open url:" + [url description])
	  }    
	}];
	[header addSubview:helpButton]

	[wrapper setAlphaValue:0.95]

	// push buttons view to wrapper
	[[wrapper contentView] addSubview:header];

	return [wrapper, content];
}
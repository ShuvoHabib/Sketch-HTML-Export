
// - Mark: Utility functions

function runCommand(cmd, path){
	var task = [[NSTask alloc] init];    
	task.setLaunchPath("/bin/bash");
	task.setArguments(cmd);
	task.launch();
}

function alertError(msg, title) {
	runCommand(['-c', 'afplay /System/Library/Sounds/Basso.aiff']);
	alert(msg, title);
}

function alert(msg, title) {
	title = title || "Alert";
	var app = [NSApplication sharedApplication];
	[app displayDialog:msg withTitle:title];
}


// All logic to export selection to HTML / CSS
function Exporter(context) {
	var context = context;
	var doc = context.document;
	var page = doc.currentPage();	
	var selection = doc ? doc.findSelectedLayers() : nil;
	var selectedArtboards = getSelectedArtboards();
	
	var imageFormat = "svg";
	var imageScales = [1];
	
	// Accessors
	this.getSelection = function() {
		return selection;
	}
	
	this.getSelectedArtboards = function() {
		return selectedArtboards;
	}	
	
	// Utility functions

	function forEachLayer(group, func) {
		var layers = group.layers();
		for (var i=0; i < layers.count(); i++) {
			func(layers.objectAtIndex(i));
		}
	};
	
	function forEachChild(group, func) {
		var layers = group.children();
		for (var i=0; i < layers.count(); i++) {
			func(layers.objectAtIndex(i));
		}
	}
    
	function cleanString(str) {
		return str.replace(/\W+/g, "-");
	}
	
	function layerMarkedForExport(layer) {
		var exportOptions = layer.exportOptionsGeneric();
		var formats = exportOptions.exportFormats();
		return formats.count() > 0;
	}
	
	function saveTextToFile (filename, text) {
		var path = [@"" stringByAppendingString:filename];
		var str = [@"" stringByAppendingString:text];
		str.dataUsingEncoding_(NSUTF8StringEncoding).writeToFile_atomically_(path, true);
	}

	// Gets the artboards belonging to the selected items
	function getSelectedArtboards() {
		var artboards = [];
		selection.forEach(function(layer) {
			var artboard = layer.parentArtboard();
			if (artboard != undefined) {
				artboards.push(artboard);
			}
		});
		return artboards;
	}
	
	var exportLayers = {};
	
	function generateHTML(artboard, exportPath) {
		// Create new array to save layers for export for each artboard
		exportLayers[artboard] = [];
		
		// Get HTML & CSS for children
		var childrenHtml = generateHTMLForChildren(artboard, "\t\t\t");
		
		// Generate HTML
		var html = generateHTMLHeader(artboard);		
		html += childrenHtml;
		html += generateHTMLFooter();
		
		return html;
	}
	
	function generateCSS(artboard) {
		// Generate CSS
		var css = "/* Generated by Sketch HTML Export */\n";
		css += "\n"
		
		css += "/* Boiler plate CSS */\n";
		css += "\n";
		css += generateBoilerPlateCSS();
		css += "\n";
		
		css += "/* Specific to " + artboard.name() + " */\n";
		css += generateCSSForArtboard(artboard);
		css += "\n";
		
		exportLayers[artboard].forEach(function(layer) {
			css += generateCSSForLayer(layer);
		});
		
		return css;
	}
	
	function generateHTMLHeader(artboard) {
		var html = "<html>\n";
		html += "\t<head>\n";
		html += "\t\t<link href='styles.css' rel='stylesheet'>\n";
		html += "\t</head>\n";
		
		html += "\t<body>\n";
		html += "\t\t<div class='sk-ab sk-" + cleanString(artboard.name()) + "'>\n";
		
		return html;
	}
	
	function generateHTMLFooter() {
		var html = "\t\t</div>\n";
		html += "\t</body>\n";
		html += "</html>";
		
		return html;
	}
	
	function generateHTMLForChildren(group, tabs, exportPath) {
		var html = "";
		
		forEachLayer(group, function(layer) {
			if (!layer.isVisible()) {
				return;
			}
			
			var openTag = tabs + "<div class='sk-asset sk-" + cleanString(layer.name()) + "'>";
			var closeTag = "</div>\n";
			
			// If layer is exportable, write it to HTML but not its children
			if (layerMarkedForExport(layer)) {
				html += openTag + closeTag;
				
				// This layer needs to be exported to HTML
				exportLayers[layer.parentArtboard()].push(layer);
			}
			
			// If layer is group...
			else if (layer instanceof MSLayerGroup) {
				var childrenHtml = generateHTMLForChildren(layer, tabs + "\t");
				
				// If group is not empty, write it and its children to HTML
				if (childrenHtml != "") {
					html += openTag + "\n";
					html += childrenHtml;
					html += tabs + closeTag;
					
					// This layer needs to be exported to HTML
					exportLayers[layer.parentArtboard()].push(layer);
				}
			}
		});
		
		return html;
	}
	
	function exportImages(layers, exportPath) {
		layers.forEach(function(layer) {
			exportImageForLayer(layer, exportPath);
		});
	}
	
	function exportImageForLayer(layer, exportPath) {
		var fileName = exportPath + "images/" + layer.name() + "." + imageFormat;
		var formats = imageScales.map(function(scale) {
			return [MSExportFormat formatWithScale:scale name:"" fileFormat:imageFormat];		
		});
		var requests = [MSExportRequest exportRequestsFromExportableLayer:layer exportFormats:formats useIDForName: false];
		requests.forEach(function(request) {
			[doc saveExportRequest:request toFile: fileName];
		});
	}
	
	function generateCSSForLayer(layer) {
		var css = ".sk-asset.sk-" + cleanString(layer.name()) + " {\n";
		css += "\twidth: " + Math.round(layer.frame().width()) + "px;\n";
		css += "\theight: " + Math.round(layer.frame().height()) + "px;\n";
		css += "\tleft: " + Math.round(layer.frame().x()) + "px;\n";
		css += "\ttop: " + Math.round(layer.frame().y()) + "px;\n";
		
		if (layerMarkedForExport(layer)) {
			// Embed SVG into CSS
// 			css += "\tbackground-image: url(\"data:image/svg+xml;utf8," + svg + "\");\n";
			css += "\tbackground-image: url(\"images/" + layer.name() + "." + imageFormat + "\");\n";
		}
		
		css += "}\n";
		css += "\n";
		
		return css;
	}
	
	// Generate Header CSS
	function generateBoilerPlateCSS() {		
		var css = ".sk-ab {\n"
		+ "\tposition: relative;\n"
		+ "\toverflow: hidden;\n"
		+ "}\n";
		
		css += "\n";
		
		css += ".sk-asset {\n"
		+ "\tposition: absolute;\n"
		+ "}\n";
		
		return css;
	}
	
	// Generates CSS for just the artboard div
	function generateCSSForArtboard(artboard) {	
		var css = ".sk-ab.sk-" + cleanString(artboard.name()) + " {\n";
		
		if (artboard.hasBackgroundColor) {
			css += "\tbackground-color: " + artboard.backgroundColor().svgRepresentation() + ";\n";
		}
		
		css += "\twidth: " + Math.round(artboard.frame().width()) + "px;\n";
		css += "\theight: " + Math.round(artboard.frame().height()) + "px;\n";
		
		css += "}\n";
		
		return css;
	}
	
	this.saveFiles = function(exportFolder) {
		selectedArtboards.forEach(function(artboard) {
			var exportPath = exportFolder + artboard.name() + "/";
			createFolder(exportPath);
			createFolder(exportPath + "images/");
			
			var htmlPath = exportPath + "index.html";
			saveTextToFile(htmlPath, generateHTML(artboard));
			
			var cssPath = exportPath + "styles.css";
			saveTextToFile(cssPath, generateCSS(artboard));
			
			exportImages(exportLayers[artboard], exportPath);
		});
	}
}

function createFolder(name) {
	var fileManager = [NSFileManager defaultManager];
	[fileManager createDirectoryAtPath:name withIntermediateDirectories:true attributes:nil error:nil];
}

function fileSaver() {
    // Panel
    var openPanel = [NSOpenPanel openPanel]

    [openPanel setTitle: "Choose a location…"]
    [openPanel setMessage: "Select the export location…"];
    [openPanel setPrompt: "Export"];

    [openPanel setCanCreateDirectories: true]
    [openPanel setCanChooseFiles: false]
    [openPanel setCanChooseDirectories: true]
    [openPanel setAllowsMultipleSelection: false]
    [openPanel setShowsHiddenFiles: false]
    [openPanel setExtensionHidden: false]

    // [openPanel setDirectoryURL:url]

    var openPanelButtonPressed = [openPanel runModal]
    if (openPanelButtonPressed == NSFileHandlingPanelOKButton) {
        allowedUrl = [openPanel URL]
    }
    return allowedUrl
}

// Called when user runs "Eport HTML"
function exportHTML(context) {
	try {
		var exporter = new Exporter(context);
		
		if (exporter.getSelectedArtboards() == undefined || exporter.getSelectedArtboards().length < 1) {
			alertError("Please select the artboards you want to export to HTML.", "No Artboard Selected");
			return;
		}
				
		// Open the system dialog to choose the export location
		var fileURL = fileSaver();
		var exportPath = fileURL.path() + "/";

		exporter.saveFiles(exportPath);
		
	} catch(e) {
		log(e);
		alert(e, "Error");
	}
}